name: Workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  NODE_ENV: test
jobs:

  build_test:
    name: Build_and_Test
    services:
      mongo-db:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: non-prod-user
          MONGO_INITDB_ROOT_PASSWORD: non-prod-password
          MONGO_INITDB_DATABASE: myappdb
        ports:
          - 27017:27017
    env:
      MONGO_URI: mongodb://localhost:27017/myappdb?authSource=admin
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      NODE_ENV: test

    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: check files
        run: ls

      - name: setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: installing
        run: npm install

      - name: seed data
        run: node ./seed.js

      - name: unit testing
        id: unit-test-1
        run: npm test

      - name: Archive Test Result
        if: success() && steps.unit-test-1.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: mocha-test-results
          path: test-results.xml

      - name: status
        if: always()
        run: echo "success"

  code-coverage:
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mongo-db:
        image: mongo:latest
        options:
          --name mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: non-prod-user
          MONGO_INITDB_ROOT_PASSWORD: non-prod-password
          MONGO_INITDB_DATABASE: myappdb
    env:
      MONGO_URI: mongodb://mongo:27017/myappdb?authSource=admin
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      NODE_ENV: test
    steps:
      - name: checkout
        uses: actions/checkout@v4

#      - name: setup node js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: install
        run: npm install

      - name: seed
        run: node ./seed.js

      - name: check code coverage
        run: npm run coverage
        continue-on-error: true

      - name: Archive Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage
          retention-days: 5

  docker:
    name: Building and Testing Containerization
    runs-on: ubuntu-latest
    needs: [ build_test,code-coverage ]
    permissions:
      contents: read
      packages: write
    steps:

      - name: checkout sourcecode
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Build And Push
        id: docker-build-push-1
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        if: success() && steps.docker-build-push-1.outcome == 'success'
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
          
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          
          echo checking solar-system-app url using wget
          wget -q -O - 127.0.0.1:3000/live | grep live


  dev-deploy:
    name: Deployment
    needs: docker
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: configuring k8 environment
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: test-cluster

      - name: test environment
        run: |
          kubectl get nodes

      - name: installing ingress-controller on k8s
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          
#          kubectl wait -n ingress-nginx \
#              --for=condition=ready pod \
#              --timeout=15s
#          kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 8080:80 &

      - name: create secrets
        run: |
          kubectl create namespace ${{ vars.NAMESPACE }}
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI="${{ vars.MONGO_URI }}" \
              --from-literal=MONGO_USERNAME="${{ vars.MONGO_USERNAME }}" \
              --from-literal=MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
              --dry-run=client \
              -o yaml | kubectl apply -f -
          
          kubectl get secrets -n ${{ vars.NAMESPACE }} mongo-db-creds -o yaml

      - name: Replace Token in manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '__{__'
          tokenSuffix: '__}__'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}
          INGRESS_IP: "localhost:8080"

      - name: creating deployment
        run: |
          kubectl apply -f ./kubernetes/development/deployment.yaml

  integration-test:
    name: Integration Test
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: echo test
